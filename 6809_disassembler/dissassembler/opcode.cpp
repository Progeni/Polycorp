/*
	OPCODE.C
	--------
	6809 Opcodes for the dissassembler.
*/

#include "opcode.h"

const char *NONE = "----";

/*
	PAGE 0 OPCODES
	--------------
*/
ASPT_opcode page0_opcode[] =
{
{0x00, QQ,    "NEG",   BASE_PAGE_DIRECT},
{0x01, XX,    NONE,    INHERENT},
{0x02, XX,    NONE,    INHERENT},
{0x03, QQ,    "COM",   BASE_PAGE_DIRECT},
{0x04, QQ,    "LSR",   BASE_PAGE_DIRECT},
{0x05, XX,    NONE,    INHERENT},
{0x06, QQ,    "ROR",   BASE_PAGE_DIRECT},
{0x07, QQ,    "ASR",   BASE_PAGE_DIRECT},
{0x08, QQ,    "LSL",   BASE_PAGE_DIRECT},
{0x09, QQ,    "ROL",   BASE_PAGE_DIRECT},
{0x0A, QQ,    "DEC",   BASE_PAGE_DIRECT},
{0x0B, XX,    NONE,    INHERENT},
{0x0C, QQ,    "INC",   BASE_PAGE_DIRECT},
{0x0D, QQ,    "TST",   BASE_PAGE_DIRECT},
{0x0E, QQ,    "JMP",   BASE_PAGE_DIRECT},
{0x0F, QQ,    "CLR",   BASE_PAGE_DIRECT},

{0x10, XX,    NONE,    SPECIAL},
{0x11, XX,    NONE,    SPECIAL},
{0x12, XX,    "NOP",   INHERENT},
{0x13, XX,    "SYNC",  INHERENT},
{0x14, XX,    NONE,    INHERENT},
{0x15, XX,    NONE,    INHERENT},
{0x16, MM_NN, "LBRA",  RELATIVE},
{0x17, MM_NN, "LBSR",  RELATIVE},
{0x18, XX,    NONE,    INHERENT},
{0x19, XX,    "DAA",   INHERENT},
{0x1A, DD,    "ORCC",  IMMEDIATE},
{0x1B, XX,    NONE,    INHERENT},
{0x1C, DD,    "ANDCC", IMMEDIATE},
{0x1D, XX,    "SEX",   INHERENT},
{0x1E, DD,    "EXG",   REGISTER},
{0x1F, DD,    "TFR",   REGISTER},

{0x20, MM,    "BRA",   RELATIVE},
{0x21, MM,    "BRN",   RELATIVE},
{0x22, MM,    "BHI",   RELATIVE},
{0x23, MM,    "BLS",   RELATIVE},
{0x24, MM,    "BCC",   RELATIVE},
{0x25, MM,    "BCS",   RELATIVE},
{0x26, MM,    "BNE",   RELATIVE},
{0x27, MM,    "BEQ",   RELATIVE},
{0x28, MM,    "BVC",   RELATIVE},
{0x29, MM,    "BVS",   RELATIVE},
{0x2A, MM,    "BPL",   RELATIVE},
{0x2B, MM,    "BMI",   RELATIVE},
{0x2C, MM,    "BGE",   RELATIVE},
{0x2D, MM,    "BLT",   RELATIVE},
{0x2E, MM,    "BGT",   RELATIVE},
{0x2F, MM,    "BLE",   RELATIVE},

{0x30, PP,    "LEAX",  INDEXED_INDIRECT},
{0x31, PP,    "LEAY",  INDEXED_INDIRECT},
{0x32, PP,    "LEAS",  INDEXED_INDIRECT},
{0x33, PP,    "LEAU",  INDEXED_INDIRECT},
{0x34, DD,    "PSHS",  REGISTER_STACK},
{0x35, DD,    "PULS",  REGISTER_STACK},
{0x36, DD,    "PSHU",  REGISTER_STACK},
{0x37, DD,    "PULU",  REGISTER_STACK},
{0x38, XX,    NONE,    INHERENT},
{0x39, XX,    "RTS",   INHERENT},
{0x3A, XX,    "ABX",   INHERENT},
{0x3B, XX,    "RTI",   INHERENT},
{0x3C, DD,    "CWAI",  IMMEDIATE},
{0x3D, XX,    "MUL",   INHERENT},
{0x3E, XX,    NONE,    INHERENT},
//{0x3F, XX,    "SWI",   INHERENT},
{0x3F, DD,    "SWI",   IMMEDIATE},					// Poly SWI handler

{0x40, XX,    "NEGA",  INHERENT},
{0x41, XX,    NONE,    INHERENT},
{0x42, XX,    NONE,    INHERENT},
{0x43, XX,    "COMA",  INHERENT},
{0x44, XX,    "LSRA",  INHERENT},
{0x45, XX,    NONE,    INHERENT},
{0x46, XX,    "RORA",  INHERENT},
{0x47, XX,    "ASRA",  INHERENT},
{0x48, XX,    "ASLA",  INHERENT},
{0x49, XX,    "ROLA",  INHERENT},
{0x4A, XX,    "DECA",  INHERENT},
{0x4B, XX,    NONE,    INHERENT},
{0x4C, XX,    "INCA",  INHERENT},
{0x4D, XX,    "TSTA",  INHERENT},
{0x4E, XX,    NONE,    INHERENT},
{0x4F, XX,    "CLRA",  INHERENT},

{0x50, XX,    "NEGB",  INHERENT},
{0x51, XX,    NONE,    INHERENT},
{0x52, XX,    NONE,    INHERENT},
{0x53, XX,    "COMB",  INHERENT},
{0x54, XX,    "LSRB",  INHERENT},
{0x55, XX,    NONE,    INHERENT},
{0x56, XX,    "RORB",  INHERENT},
{0x57, XX,    "ASRB",  INHERENT},
{0x58, XX,    "ASLB",  INHERENT},
{0x59, XX,    "ROLB",  INHERENT},
{0x5A, XX,    "DECB",  INHERENT},
{0x5B, XX,    NONE,    INHERENT},
{0x5C, XX,    "INCB",  INHERENT},
{0x5D, XX,    "TSTB",  INHERENT},
{0x5E, XX,    NONE,    INHERENT},
{0x5F, XX,    "CLRB",  INHERENT},

{0x60, PP,    "NEG",   INDEXED_INDIRECT},
{0x61, XX,    NONE,    INHERENT},
{0x62, XX,    NONE,    INHERENT},
{0x63, PP,    "COM",   INDEXED_INDIRECT},
{0x64, PP,    "LSR",   INDEXED_INDIRECT},
{0x65, XX,    NONE,    INHERENT},
{0x66, PP,    "ROR",   INDEXED_INDIRECT},
{0x67, PP,    "ASR",   INDEXED_INDIRECT},
{0x68, PP,    "ASL",   INDEXED_INDIRECT},
{0x69, PP,    "ROL",   INDEXED_INDIRECT},
{0x6A, PP,    "DEC",   INDEXED_INDIRECT},
{0x6B, XX,    NONE,    INHERENT},
{0x6C, PP,    "INC",   INDEXED_INDIRECT},
{0x6D, PP,    "TST",   INDEXED_INDIRECT},
{0x6E, PP,    "JMP",   INDEXED_INDIRECT},
{0x6F, PP,    "CLR",   INDEXED_INDIRECT},

{0x70, SS_QQ, "NEG",   EXTENDED_DIRECT},
{0x71, XX,    NONE,    INHERENT},
{0x72, XX,    NONE,    INHERENT},
{0x73, SS_QQ, "COM",   EXTENDED_DIRECT},
{0x74, SS_QQ, "LSR",   EXTENDED_DIRECT},
{0x75, XX,    NONE,    INHERENT},
{0x76, SS_QQ, "ROR",   EXTENDED_DIRECT},
{0x77, SS_QQ, "ASR",   EXTENDED_DIRECT},
{0x78, SS_QQ, "ASL",   EXTENDED_DIRECT},
{0x79, SS_QQ, "ROL",   EXTENDED_DIRECT},
{0x7A, SS_QQ, "DEC",   EXTENDED_DIRECT},
{0x7B, XX,    NONE,    INHERENT},
{0x7C, SS_QQ, "INC",   EXTENDED_DIRECT},
{0x7D, SS_QQ, "TST",   EXTENDED_DIRECT},
{0x7E, SS_QQ, "JMP",   EXTENDED_DIRECT},
{0x7F, SS_QQ, "CLR",   EXTENDED_DIRECT},

{0x80, DD,    "SUBA",  IMMEDIATE},
{0x81, DD,    "CMPA",  IMMEDIATE},
{0x82, DD,    "SBCA",  IMMEDIATE},
{0x83, DD_DD, "SUBD",  IMMEDIATE},
{0x84, DD,    "ANDA",  IMMEDIATE},
{0x85, DD,    "BITA",  IMMEDIATE},
{0x86, DD,    "LDA",   IMMEDIATE},
{0x87, XX,    NONE,    INHERENT},
{0x88, DD,    "EORA",  IMMEDIATE},
{0x89, DD,    "ADCA",  IMMEDIATE},
{0x8A, DD,    "ORA",   IMMEDIATE},
{0x8B, DD,    "ADDA",  IMMEDIATE},
{0x8C, DD_DD, "CMPX",  IMMEDIATE},
{0x8D, MM,    "BSR",   RELATIVE},
{0x8E, DD_DD, "LDX",   IMMEDIATE},
{0x8F, XX,    NONE,    INHERENT},

{0x90, QQ,    "SUBA",  BASE_PAGE_DIRECT},
{0x91, QQ,    "CMPA",  BASE_PAGE_DIRECT},
{0x92, QQ,    "SBCA",  BASE_PAGE_DIRECT},
{0x93, QQ,    "SUBD",  BASE_PAGE_DIRECT},
{0x94, QQ,    "ANDA",  BASE_PAGE_DIRECT},
{0x95, QQ,    "BITA",  BASE_PAGE_DIRECT},
{0x96, QQ,    "LDA",   BASE_PAGE_DIRECT},
{0x97, QQ,    "STA",   BASE_PAGE_DIRECT},
{0x98, QQ,    "EORA",  BASE_PAGE_DIRECT},
{0x99, QQ,    "ADCA",  BASE_PAGE_DIRECT},
{0x9A, QQ,    "ORA",   BASE_PAGE_DIRECT},
{0x9B, QQ,    "ADDA",  BASE_PAGE_DIRECT},
{0x9C, QQ,    "CMPX",  BASE_PAGE_DIRECT},
{0x9D, QQ,    "JSR",   BASE_PAGE_DIRECT},
{0x9E, QQ,    "LDX",   BASE_PAGE_DIRECT},
{0x9F, QQ,    "STX",   BASE_PAGE_DIRECT},

{0xA0, PP,    "SUBA",  INDEXED_INDIRECT},
{0xA1, PP,    "CMPA",  INDEXED_INDIRECT},
{0xA2, PP,    "SBCA",  INDEXED_INDIRECT},
{0xA3, PP,    "SUBD",  INDEXED_INDIRECT},
{0xA4, PP,    "ANDA",  INDEXED_INDIRECT},
{0xA5, PP,    "BITA",  INDEXED_INDIRECT},
{0xA6, PP,    "LDA",   INDEXED_INDIRECT},
{0xA7, PP,    "STA",   INDEXED_INDIRECT},
{0xA8, PP,    "EORA",  INDEXED_INDIRECT},
{0xA9, PP,    "ADCA",  INDEXED_INDIRECT},
{0xAA, PP,    "ORA",   INDEXED_INDIRECT},
{0xAB, PP,    "ADDA",  INDEXED_INDIRECT},
{0xAC, PP,    "CMPX",  INDEXED_INDIRECT},
{0xAD, PP,    "JSR",   INDEXED_INDIRECT},
{0xAE, PP,    "LDX",   INDEXED_INDIRECT},
{0xAF, PP,    "STX",   INDEXED_INDIRECT},

{0xB0, SS_QQ, "SUBA",  EXTENDED_DIRECT},
{0xB1, SS_QQ, "CMPA",  EXTENDED_DIRECT},
{0xB2, SS_QQ, "SBCA",  EXTENDED_DIRECT},
{0xB3, SS_QQ, "SUBD",  EXTENDED_DIRECT},
{0xB4, SS_QQ, "ANDA",  EXTENDED_DIRECT},
{0xB5, SS_QQ, "BITA",  EXTENDED_DIRECT},
{0xB6, SS_QQ, "LDA",   EXTENDED_DIRECT},
{0xB7, SS_QQ, "STA",   EXTENDED_DIRECT},
{0xB8, SS_QQ, "EORA",  EXTENDED_DIRECT},
{0xB9, SS_QQ, "ADCA",  EXTENDED_DIRECT},
{0xBA, SS_QQ, "ORA",   EXTENDED_DIRECT},
{0xBB, SS_QQ, "ADDA",  EXTENDED_DIRECT},
{0xBC, SS_QQ, "CMPX",  EXTENDED_DIRECT},
{0xBD, SS_QQ, "JSR",   EXTENDED_DIRECT},
{0xBE, SS_QQ, "LDX",   EXTENDED_DIRECT},
{0xBF, SS_QQ, "STX",   EXTENDED_DIRECT},

{0xC0, DD,    "SUBB",  IMMEDIATE},
{0xC1, DD,    "CMPB",  IMMEDIATE},
{0xC2, DD,    "SBCB",  IMMEDIATE},
{0xC3, DD_DD, "ADDD",  IMMEDIATE},
{0xC4, DD,    "ANDB",  IMMEDIATE},
{0xC5, DD,    "BITB",  IMMEDIATE},
{0xC6, DD,    "LDB",   IMMEDIATE},
{0xC7, XX,    NONE,    INHERENT},
{0xC8, DD,    "EORB",  IMMEDIATE},
{0xC9, DD,    "ADCB",  IMMEDIATE},
{0xCA, DD,    "ORB",   IMMEDIATE},
{0xCB, DD,    "ADDB",  IMMEDIATE},
{0xCC, DD_DD, "LDD",   IMMEDIATE},
{0xCD, XX,    NONE,    INHERENT},
{0xCE, DD_DD, "LDU",   IMMEDIATE},
{0xCF, XX,    NONE,    INHERENT},

{0xD0, QQ,    "SUBB",  BASE_PAGE_DIRECT},
{0xD1, QQ,    "CMPB",  BASE_PAGE_DIRECT},
{0xD2, QQ,    "SBCB",  BASE_PAGE_DIRECT},
{0xD3, QQ,    "ADDD",  BASE_PAGE_DIRECT},
{0xD4, QQ,    "ANDB",  BASE_PAGE_DIRECT},
{0xD5, QQ,    "BITB",  BASE_PAGE_DIRECT},
{0xD6, QQ,    "LDB",   BASE_PAGE_DIRECT},
{0xD7, QQ,    "STB",   BASE_PAGE_DIRECT},
{0xD8, QQ,    "EORB",  BASE_PAGE_DIRECT},
{0xD9, QQ,    "ADCB",  BASE_PAGE_DIRECT},
{0xDA, QQ,    "ORB",   BASE_PAGE_DIRECT},
{0xDB, QQ,    "ADDB",  BASE_PAGE_DIRECT},
{0xDC, QQ,    "LDD",   BASE_PAGE_DIRECT},
{0xDD, QQ,    "STD",   BASE_PAGE_DIRECT},
{0xDE, QQ,    "LDU",   BASE_PAGE_DIRECT},
{0xDF, QQ,    "STU",   BASE_PAGE_DIRECT},


{0xE0, PP,    "SUBB",  INDEXED_INDIRECT},
{0xE1, PP,    "CMPB",  INDEXED_INDIRECT},
{0xE2, PP,    "SBCB",  INDEXED_INDIRECT},
{0xE3, PP,    "ADDD",  INDEXED_INDIRECT},
{0xE4, PP,    "ANDB",  INDEXED_INDIRECT},
{0xE5, PP,    "BITB",  INDEXED_INDIRECT},
{0xE6, PP,    "LDB",   INDEXED_INDIRECT},
{0xE7, PP,    "STB",   INDEXED_INDIRECT},
{0xE8, PP,    "EORB",  INDEXED_INDIRECT},
{0xE9, PP,    "ADCB",  INDEXED_INDIRECT},
{0xEA, PP,    "ORB",   INDEXED_INDIRECT},
{0xEB, PP,    "ADDB",  INDEXED_INDIRECT},
{0xEC, PP,    "LDD",   INDEXED_INDIRECT},
{0xED, PP,    "STD",   INDEXED_INDIRECT},
{0xEE, PP,    "LDU",   INDEXED_INDIRECT},
{0xEF, PP,    "STU",   INDEXED_INDIRECT},

{0xF0, SS_QQ, "SUBB",  EXTENDED_DIRECT},
{0xF1, SS_QQ, "CMPB",  EXTENDED_DIRECT},
{0xF2, SS_QQ, "SBCB",  EXTENDED_DIRECT},
{0xF3, SS_QQ, "ADDD",  EXTENDED_DIRECT},
{0xF4, SS_QQ, "ANDB",  EXTENDED_DIRECT},
{0xF5, SS_QQ, "BITB",  EXTENDED_DIRECT},
{0xF6, SS_QQ, "LDB",   EXTENDED_DIRECT},
{0xF7, SS_QQ, "STB",   EXTENDED_DIRECT},
{0xF8, SS_QQ, "EORB",  EXTENDED_DIRECT},
{0xF9, SS_QQ, "ADCB",  EXTENDED_DIRECT},
{0xFA, SS_QQ, "ORB",   EXTENDED_DIRECT},
{0xFB, SS_QQ, "ADDB",  EXTENDED_DIRECT},
{0xFC, SS_QQ, "LDD",   EXTENDED_DIRECT},
{0xFD, SS_QQ, "STD",   EXTENDED_DIRECT},
{0xFE, SS_QQ, "LDU",   EXTENDED_DIRECT},
{0xFF, SS_QQ, "STU",   EXTENDED_DIRECT}
};

/*
	PAGE 10 OPCODES
	---------------
*/
ASPT_opcode page10_opcode[] =
{
{0x21, MM_NN, "LBRN",  RELATIVE},
{0x22, MM_NN, "LBHI",  RELATIVE},
{0x23, MM_NN, "LBLS",  RELATIVE},
{0x24, MM_NN, "LBCC",  RELATIVE},
{0x25, MM_NN, "LBCS",  RELATIVE},
{0x26, MM_NN, "LBNE",  RELATIVE},
{0x27, MM_NN, "LBEQ",  RELATIVE},
{0x28, MM_NN, "LBVC",  RELATIVE},
{0x29, MM_NN, "LBVS",  RELATIVE},
{0x2A, MM_NN, "LBPL",  RELATIVE},
{0x2B, MM_NN, "LBMI",  RELATIVE},
{0x2C, MM_NN, "LBGE",  RELATIVE},
{0x2D, MM_NN, "LBLT",  RELATIVE},
{0x2E, MM_NN, "LBGT",  RELATIVE},
{0x2F, MM_NN, "LBLE",  RELATIVE},

{0x3F, XX,    "SWI2",  INHERENT},

{0x83, DD_DD, "CMPD",  IMMEDIATE},
{0x8C, DD_DD, "CMPY",  IMMEDIATE},
{0x8E, DD_DD, "LDY",   IMMEDIATE},

{0x93, QQ,    "CMPD",  BASE_PAGE_DIRECT},
{0x9C, QQ,    "CMPY",  BASE_PAGE_DIRECT},
{0x9E, QQ,    "LDY",   BASE_PAGE_DIRECT},
{0x9F, QQ,    "STY",   BASE_PAGE_DIRECT},

{0xA3, PP,    "CMPD",  INDEXED_INDIRECT},
{0xAC, PP,    "CMPY",  INDEXED_INDIRECT},
{0xAE, PP,    "LDY",   INDEXED_INDIRECT},
{0xAF, PP,    "STY",   INDEXED_INDIRECT},

{0xB3, SS_QQ, "CMPD",  EXTENDED_DIRECT},
{0xBC, SS_QQ, "CMPY",  EXTENDED_DIRECT},
{0xBE, SS_QQ, "LDY",   EXTENDED_DIRECT},
{0xBF, SS_QQ, "STY",   EXTENDED_DIRECT},

{0xCE, DD_DD, "LDS",   IMMEDIATE},

{0xDE, QQ,    "LDS",   BASE_PAGE_DIRECT},
{0xDF, QQ,    "STS",   BASE_PAGE_DIRECT},

{0xEE, PP,    "LDS",   INDEXED_INDIRECT},
{0xEF, PP,    "STS",   INDEXED_INDIRECT},

{0xFE, SS_QQ, "LDS",   EXTENDED_DIRECT},
{0xFF, SS_QQ, "STS",   EXTENDED_DIRECT}
} ;

/*
	PAGE 11 OPCODES
	---------------
*/
ASPT_opcode page11_opcode[] =
{
{0x3F, XX,    "SWI3",  INHERENT},

{0x83, DD_DD, "CMPU",  IMMEDIATE},
{0x8C, DD_DD, "CMPS",  IMMEDIATE},

{0x93, QQ,    "CMPU",  BASE_PAGE_DIRECT},
{0x9C, QQ,    "CMPS",  BASE_PAGE_DIRECT},

{0xA3, PP,    "CMPU",  INDEXED_INDIRECT},
{0xAC, PP,    "CMPS",  INDEXED_INDIRECT},

{0xB3, SS_QQ, "CMPU",  EXTENDED_DIRECT},
{0xBC, SS_QQ, "CMPS",  EXTENDED_DIRECT} 
};

long page0_opcode_size = sizeof(page0_opcode) / sizeof(*page0_opcode);
long page10_opcode_size = sizeof(page10_opcode) / sizeof(*page10_opcode);
long page11_opcode_size = sizeof(page11_opcode) / sizeof(*page11_opcode);
